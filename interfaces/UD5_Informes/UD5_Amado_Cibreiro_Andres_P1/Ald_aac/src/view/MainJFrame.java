/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import clock.IAlarmListener;
import java.awt.event.ActionListener;
import java.awt.event.MouseListener;
import javax.swing.Icon;
import javax.swing.ImageIcon;


/**
 *
 * @author aca
 */
public class MainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clock = new clock.ClockBean();
        aldMenuBar = new javax.swing.JMenuBar();
        aldMenu = new javax.swing.JMenu();
        establishmentInformationMenuItem = new javax.swing.JMenuItem();
        computersManagementMenuItem = new javax.swing.JMenuItem();
        generateReportMenuItem = new javax.swing.JMenuItem();
        quitMenuItem = new javax.swing.JMenuItem();
        notificationsMenu = new javax.swing.JMenu();
        notificationsMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        aldMenu.setText("File");

        establishmentInformationMenuItem.setText("Establishment Information...");
        establishmentInformationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                establishmentInformationMenuItemActionPerformed(evt);
            }
        });
        aldMenu.add(establishmentInformationMenuItem);

        computersManagementMenuItem.setText("Computers Management...");
        aldMenu.add(computersManagementMenuItem);

        generateReportMenuItem.setText("Generate Report...");
        aldMenu.add(generateReportMenuItem);

        quitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        quitMenuItem.setText("Quit");
        aldMenu.add(quitMenuItem);

        aldMenuBar.add(aldMenu);

        notificationsMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/clock/bell.png"))); // NOI18N

        notificationsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        notificationsMenuItem.setText("Notifications...");
        notificationsMenu.add(notificationsMenuItem);

        aldMenuBar.add(notificationsMenu);

        setJMenuBar(aldMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(320, Short.MAX_VALUE)
                .addComponent(clock, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(250, Short.MAX_VALUE)
                .addComponent(clock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void establishmentInformationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_establishmentInformationMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_establishmentInformationMenuItemActionPerformed

    
    
    public void addEstablishmentInformationMenuItemActionListener(ActionListener al){
       this.establishmentInformationMenuItem.addActionListener(al);
    }
    
    public void addComputersManagementMenuItemActionListener(ActionListener al){
       this.computersManagementMenuItem.addActionListener(al);
    }
    
    public void addGenerateReportMenuItemActionListener(ActionListener al){
       this.generateReportMenuItem.addActionListener(al);
    }
    
    public void addQuitMenuItemActionListener(ActionListener al){
       this.quitMenuItem.addActionListener(al);
    }
    
    
    
    
    
    
    public void addNotificationMenuItemItemListener(ActionListener listener) {
        this.notificationsMenuItem.addActionListener(listener);
    }

    public void enableAlarm(boolean enable) {
        this.clock.setEnableAlarm(enable);
    }

    public String getAlarmMessage() {
        return this.clock.getMessage();
    }

    public void setAlarmMessage(String message) {
        this.clock.setMessage(message);
    }

    public void setMode24(boolean mode24h) {
        this.clock.setMode24(mode24h);
    }

    public void setEnableAlarm(boolean enable) {
        this.clock.setEnableAlarm(enable);
    }

    public int getMinutesAlarm() {
        return this.clock.getMinutesAlarm();
    }

    public int getHourAlarm() {
        return this.clock.getHourAlarm();
    }

    public void setHourAlarm(int hour) {
        this.clock.setHourAlarm(hour);
    }

    public void setMinutesAlarm(int minute) {
        this.clock.setMinutesAlarm(minute);
    }

    public boolean isMode24() {
        return this.clock.isMode24();
    }

    public boolean isEnableAlarm() {
        return this.clock.isEnableAlarm();
    }

    public void addAlarmListener(IAlarmListener receptor) {
        this.clock.addAlarmListener(receptor);
    }

    public void addNotificationMenuMouseListener(MouseListener listener) {
        this.addMouseListener(listener);
    }
    
    Icon bell = new ImageIcon("./src/view/clock/bell.png");
    Icon bellActive = new ImageIcon("./src/view/clock/bellActive.png");
    
    public void notificationsMenuIconChange(boolean enable){
        if(enable){
            this.notificationsMenu.setIcon(bellActive);
        }else{
            this.notificationsMenu.setIcon(bell);
        }
    }
    
    public void setFocus(){
        getContentPane().setFocusable(true);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu aldMenu;
    private javax.swing.JMenuBar aldMenuBar;
    private clock.ClockBean clock;
    private javax.swing.JMenuItem computersManagementMenuItem;
    private javax.swing.JMenuItem establishmentInformationMenuItem;
    private javax.swing.JMenuItem generateReportMenuItem;
    private javax.swing.JMenu notificationsMenu;
    private javax.swing.JMenuItem notificationsMenuItem;
    private javax.swing.JMenuItem quitMenuItem;
    // End of variables declaration//GEN-END:variables
}
